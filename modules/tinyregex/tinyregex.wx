
Namespace tinyregex

#Import "tiny-regex-c/re.c"

#Import "tiny-regex-c/re.h"

Extern

#rem wonkeydoc re_t structure pointer for compiled regular expressions
#end
Alias re_t:Void Ptr = "re_t"

#rem wonkeydoc Compile a regex from String to a custom pattern structure

The following features / regex-operators are supported by this library:

| Operator | Description
|:---|:---
| `.`        | Dot, matches any character
| `^`        | Start anchor, matches beginning of string
| `$`        | End anchor, matches end of string
| `*`        | Asterisk, match zero or more (greedy)
| `+`        | Plus, match one or more (greedy)
| `?`        | Question, match zero or one (non-greedy)
| `[abc]`    | Character class, match if one of `{'a', 'b', 'c'}`
| `[^abc]`   | Inverted class, match if NOT one of `{'a', 'b', 'c'}`
| `[a-zA-Z]` | Character ranges, the character set of the ranges `{ a-z | A-Z }`
| `\\s`       | Whitespace, `\\t \\f \\r \\n \\v` and spaces
| `\\S`       | Non-whitespace
| `\\w`       | Alphanumeric, `[a-zA-Z0-9_]`
| `\\W`       | Non-alphanumeric
| `\\d`       | Digits, `[0-9]`
| `\\D`       | Non-digits

NOTE: inverted character classes are buggy - see the test harness for concrete examples.

@param pattern The regex pattern

@return a compiled `re_t` structure pointer

#end
Function re_compile:re_t( pattern:CString )

#rem wonkeydoc Search a text-string for a compiled regex and get an index into the string

@param pattern The compiled regex pattern, compiled using re_compile()

@param text The input string

@param matchlength Pointer to an `Int Ptr`  that gets the length of the match

@return Char index inside `text`, or `-1` if the regular expression doesn't match

#end
Function re_matchp:Int( pattern:re_t, text:CString, matchlength:Int Ptr )

#rem wonkeydoc Search a text-string for a regex pattern and get an index into the string

The following features / regex-operators are supported by this library:

| Operator | Description
|:---|:---
| `.`        | Dot, matches any character
| `^`        | Start anchor, matches beginning of string
| `$`        | End anchor, matches end of string
| `*`        | Asterisk, match zero or more (greedy)
| `+`        | Plus, match one or more (greedy)
| `?`        | Question, match zero or one (non-greedy)
| `[abc]`    | Character class, match if one of `{'a', 'b', 'c'}`
| `[^abc]`   | Inverted class, match if NOT one of `{'a', 'b', 'c'}`
| `[a-zA-Z]` | Character ranges, the character set of the ranges `{ a-z | A-Z }`
| `\\s`       | Whitespace, `\\t \\f \\r \\n \\v` and spaces
| `\\S`       | Non-whitespace
| `\\w`       | Alphanumeric, `[a-zA-Z0-9_]`
| `\\W`       | Non-alphanumeric
| `\\d`       | Digits, `[0-9]`
| `\\D`       | Non-digits

NOTE: inverted character classes are buggy - see the test harness for concrete examples.

@param pattern The regex pattern

@param text The input string

@param matchlength Pointer to an `Int Ptr`  that gets the length of the match

@return Char index inside `text`, or `-1` if the regular expression doesn't match

#end
Function re_match:Int( pattern:CString, text:CString, matchlength:Int Ptr )
