Namespace wonkey.strings

'jl added
'------------------------------------------------------------
#rem wonkeydoc Return a character from a string

Asc() is the same as the String index operator `[]`

@param input The input String

@param index The character index, defaults to 0 (first character)

@example
Print Asc("Hello")   ' output:  72 (Character 'H')
Print Asc("World",2) ' output: 114 (Character 'r')

Print "Hello"[0]     ' output:  72 (Character 'H')
Print "World"[2]     ' output: 114 (Character 'r')
@end

#end
Function Asc:Int( input:String, index:UInt = 0 )
	Return input[index]
End

#rem wonkeydoc Create a String from a single character

Chr() is the same as the function `String.FromChar(character)`

@param character The character

@example
Print Chr(49)              ' outputs String "1"
Print Chr(65)              ' outputs String "A"
Print Chr(169)             ' outputs String "©"
Print Chr(198)             ' outputs String "Æ"
Print Asc(Chr($05D0))      ' output: 1488 
Print Hex(Asc(Chr($05D0))) ' output: 5D0
@end

#end
Function Chr:String( character:Int )
    Return String.FromChar(character)
End
'------------------------------------------------------------

#rem wonkeydoc Returns a String containing 'count' space characters (Ascii char 32)

Space() is the same as `" ".Dup(count)`

@param count Space character count

@example
Print "A" + Space(5) + "Z" ' output: "A     Z"
@end

#end
Function Space:String(count:Int)
    Return " ".Dup(count)
End

#rem wonkeydoc Left Trim: Returns a String with any leading whitespace removed.

LTrim() is the same as `theString.TrimStart()`

@param input the input string

@example
Print LTrim("  abc") ' output: "abc"
@end

#end
Function LTrim:String(input:String)
    Return input.TrimStart()
End

#rem wonkeydoc Right Trim: Returns a String with any trailing whitespace removed.

RTrim() is the same as `theString.TrimEnd()`

@param input the input string

@example
Print RTrim("abc  ") ' output: "abc"
@end

#end
Function RTrim:String(input:String)
    Return input.TrimEnd()
End

#rem wonkeydoc Returns a String with leading and trailing whitespace removed.

Trim() is the same as `theString.Trim()`

@param input the input string

@example
Print Trim("  abc  ") ' output: "abc"
@end

#end
Function Trim:String(input:String)
    Return input.Trim()
End

#rem wonkeydoc Returns the string converted to lowercase

LCase() is the same as `theString.ToLower()`

@param input the input string

@example
Print LCase("HeLLo WoRlD") ' output: "hello world"
@end

#end
Function LCase:String(input:String)
    Return input.ToLower()
End

#rem wonkeydoc Returns the string converted to uppercase

UCase() is the same as `theString.ToUpper()`

@param input the input string

@example
Print UCase("HeLLo WoRlD") ' output: "HELLO WORLD"
@end

#end
Function UCase:String(input:String)
    Return input.ToUpper()
End

#rem wonkeydoc Get the first 'count' characters from a string.

Left() is the same as `theString.Left(count)`

@param input The input string

@param count The number of characters to return, defaults to 1

@example
Print Left("Hello")    ' output: H
Print Left("Hello",3)  ' output: Hel
@end

#end
Function Left:String(input:String, count:Int = 1)
    Return input.Left(count)
End

#rem wonkeydoc Get the last 'count' characters from a string.

Right() is the same as `theString.Right(count)`

@param input The input string

@param count The number of characters to return, defaults to 1

@example
Print Right("Hello")    ' output: o
Print Right("Hello",3)  ' output: llo
@end

#end
Function Right:String(input:String, count:Int = 1)
    Return input.Right(count)
End

#rem wonkeydoc Get a substring from the middle of a string

Returns a string consisting of `count` characters starting from index `from`.

If `count` is less than or equal to 0, an empty string is returned.

If `from`+`count` is greater than the length of the string, the returned string is truncated.

Mid() is the same as `theString.Mid(from, count)`

@param fromChar The index of the first character to return.

@param count The number of characters to return.

@return A string consisting of `count` characters starting from index `from`.

@example
Print Mid("Hello",0,2)   ' output: He
Print Mid("Hello",1,3)   ' output: ell
Print Mid("Hello",3,100) ' output: lo
@end

#end
Function Mid:String(input:String, from:Int, count:Int)
    Return input.Mid(from, count)
End

#rem wonkeydoc Right-align the string and fill the left side with a character

If the length of `input` is greater than `width`, only the leftmost `width` characters are returned.

If the length of `input` is less than `width`, `ch` characters are added to the left of the returned string so that its length becomes `width`.

@param input The string to be right-aligned

@param width The length of the returned string

@param ch The fill-character

#end
Function RSet:String(input:String, width:Int, ch:String = " ")
	If input.Length >= width Then Return input.Left(width)
	Return input.PadLeft(width, ch)
End

#rem wonkeydoc Left-align the string and fill the right side with a character

If the length of `input` is greater than `width`, only the leftmost `width` characters are returned.

If the length of `input` is less than `width`, `ch` characters are added to the right of the returned string so that its length becomes `width`.

@param input The string to be left-aligned

@param width The length of the returned string

@param ch The fill-character

#end
Function LSet:String(input:String, width:Int, ch:String = " ")
	If input.Length >= width Then Return input.Left(width)
	Return input.PadRight(width, ch)
End

#rem wonkeydoc String interpolation ( {0},{1},{2},{3},{...},{19} )

Returns the input string with placeholders {0},{1},{2},... replaced with the corresponding argument.

Up to 20 placeholders ({0} to {19}) can be used directly using the parameters 'arg00' to 'arg19'.

If more than 20 placeholders are required, use a String-Array as the 2nd argument.

@param input The String containing the placeholders.

@param args String Array with the replacements.

@param arg00 arg00 to arg19 are used for replacing the placeholders {0},{1},{2},{3},{...},{19}

@return The string with all placeholders replaced with the replacements.

#end
Function Fmt:String(input:String, args:String[])
    Return input.Fmt(args)
End

Function Fmt:String(input:String, arg00:String)
    Return input.Fmt(New String[1](arg00))
End

Function Fmt:String(input:String, arg00:String, arg01:String)
    Return input.Fmt(New String[2](arg00, arg01))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String)
    Return input.Fmt(New String[3](arg00, arg01, arg02))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String)
    Return input.Fmt(New String[4](arg00, arg01, arg02, arg03))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String)
    Return input.Fmt(New String[5](arg00, arg01, arg02, arg03, arg04))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String)
    Return input.Fmt(New String[6](arg00, arg01, arg02, arg03, arg04, arg05))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String)
    Return input.Fmt(New String[7](arg00, arg01, arg02, arg03, arg04, arg05, arg06))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String)
    Return input.Fmt(New String[8](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String, arg08:String)
    Return input.Fmt(New String[9](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String, arg08:String, arg09:String)
    Return input.Fmt(New String[10](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String, arg08:String, arg09:String, arg10:String)
    Return input.Fmt(New String[11](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09,
                                    arg10))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String, arg08:String, arg09:String, arg10:String,
	                arg11:String)
    Return input.Fmt(New String[12](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09,
                                    arg10, arg11))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String, arg08:String, arg09:String, arg10:String,
	                arg11:String, arg12:String)
    Return input.Fmt(New String[13](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09,
                                    arg10, arg11, arg12))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String, arg08:String, arg09:String, arg10:String,
	                arg11:String, arg12:String, arg13:String)
    Return input.Fmt(New String[14](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09,
                                    arg10, arg11, arg12, arg13))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String, arg08:String, arg09:String, arg10:String,
	                arg11:String, arg12:String, arg13:String, arg14:String)
    Return input.Fmt(New String[15](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09,
                                    arg10, arg11, arg12, arg13, arg14))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String, arg08:String, arg09:String, arg10:String,
	                arg11:String, arg12:String, arg13:String, arg14:String, arg15:String)
    Return input.Fmt(New String[16](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09,
                                    arg10, arg11, arg12, arg13, arg14, arg15))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String, arg08:String, arg09:String, arg10:String,
	                arg11:String, arg12:String, arg13:String, arg14:String, arg15:String, arg16:String)
    Return input.Fmt(New String[17](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09,
                                    arg10, arg11, arg12, arg13, arg14, arg15, arg16))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String, arg08:String, arg09:String, arg10:String,
	                arg11:String, arg12:String, arg13:String, arg14:String, arg15:String, arg16:String,
	                arg17:String)
    Return input.Fmt(New String[18](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09,
                                    arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String, arg08:String, arg09:String, arg10:String,
	                arg11:String, arg12:String, arg13:String, arg14:String, arg15:String, arg16:String,
	                arg17:String, arg18:String)
    Return input.Fmt(New String[19](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09,
                                    arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18))
End

Function Fmt:String(input:String, arg00:String, arg01:String, arg02:String, arg03:String, arg04:String,
	                arg05:String, arg06:String, arg07:String, arg08:String, arg09:String, arg10:String,
	                arg11:String, arg12:String, arg13:String, arg14:String, arg15:String, arg16:String,
	                arg17:String, arg18:String, arg19:String)
    Return input.Fmt(New String[20](arg00, arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09,
                                    arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19))
End

